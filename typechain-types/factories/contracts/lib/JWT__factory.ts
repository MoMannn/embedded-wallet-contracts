/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { JWT, JWTInterface } from "../../../contracts/lib/JWT";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "secret",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "payload",
        type: "string",
      },
    ],
    name: "HS256",
    outputs: [
      {
        internalType: "string",
        name: "token",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001a57610ec09081610020823930815050f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c63bc6e4c451461002857600080fd5b60403660031901126100ab5767ffffffffffffffff6004358181116100ae57366023820112156100ae57610066903690602481600401359101610127565b916024359182116100ab57366023830112156100ab576100a761009b8461009536600487013560248801610127565b90610226565b60405191829182610186565b0390f35b80fd5b8280fd5b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176100e457604052565b6100b2565b90601f8019910116810190811067ffffffffffffffff8211176100e457604052565b67ffffffffffffffff81116100e457601f01601f191660200190565b9291926101338261010b565b9161014160405193846100e9565b82948184528183011161015e578281602093846000960137010152565b600080fd5b60005b8381106101765750506000910152565b8181015183820152602001610166565b604091602082526101a68151809281602086015260208686019101610163565b601f01601f1916010190565b604051906020820182811067ffffffffffffffff8211176100e45760405260008252565b604051906101e3826100c8565b601b82527f7b22616c67223a224853323536222c22747970223a224a5754227d00000000006020830152565b9061022260209282815194859201610163565b0190565b6040908151916020918383810161024767483067970c726175602083019252565b0393601f1994858101825261025b916100e9565b8151808481016102756711208331cf548d27602083019252565b038581018252610284916100e9565b81518084810161029e67768a61b69f428499602083019252565b0385810182526102ad916100e9565b6102b56101d6565b8251808581016102cf673f99479456a5f365602083019252565b0386810182526102de916100e9565b8251808581016102f867215cc27edac664a4602083019252565b038681018252610307916100e9565b6103109061045a565b9461031a9061045a565b94825195869185830161032c9161020f565b601760f91b815260010161033f9161020f565b03848101865261034f90866100e9565b8151808481016103696767dc55661ec86bf7602083019252565b038581018252610378916100e9565b848251808581016103936782da92947b867fef602083019252565b0386810182526103a2916100e9565b6103ab916105a7565b81518381019182529081906020010384810182526103c990826100e9565b8151808481016103e3679f830de2f1437588602083019252565b0385810182526103f2916100e9565b81518084810161040c67193a99cacd430c81602083019252565b03858101825261041b916100e9565b6104249061045a565b905193849283016104349161020f565b601760f91b81526001016104479161020f565b03908101825261045790826100e9565b90565b610457906104b260405161047f602091674a177b4c07722df3838201528281526100c8565b61049a604051675faea2b5ccb586b4838201528281526100c8565b6040519067e0905c58b4cd7f128183015281526100c8565b610b79565b634e487b7160e01b600052601160045260246000fd5b60001981146104dc5760010190565b6104b7565b9081518110156104f2570160200190565b634e487b7160e01b600052603260045260246000fd5b601f0390601f82116104dc57565b603f0390603f82116104dc57565b600381901b91906001600160fd1b038116036104dc57565b600281901b91906001600160fe1b038116036104dc57565b818102929181159184041417156104dc57565b60ff81116104dc576001901b90565b6040513d6000823e3d90fd5b909160409392825260208201526105a28251809360208685019101610163565b010190565b906040918251916020936105dc846105cd878201906779b2e8329931e06e602083019252565b03601f199586820181526100e9565b6106068151806105fa8882019067ffa003839f0e6ede602083019252565b039086820181526100e9565b6106248151806105fa8882019067227debfc90cb012b602083019252565b60009261065182518061064589820190673a3e03d733a3ab0c602083019252565b039087820181526100e9565b61066f82518061064589820190679a4d55f122dd36ef602083019252565b8361069a83518061068e8a8201906766cecb0fa69f1540602083019252565b039088820181526100e9565b6106b883518061068e8a820190674ac1b8669918e664602083019252565b6106d683518061068e8a82019067429a0f64f04d2cd4602083019252565b6106f483518061068e8a82019067e0e024ea74f985db602083019252565b828251116000146109005750600061075a87926107318551806107258782019067bb986885e35d08d0602083019252565b03908a820181526100e9565b61074f85518061072587820190678d62e6164a8aa2d4602083019252565b84519182809261020f565b039060025afa156108fb57600051915b61078882518061064589820190677b2015326845f019602083019252565b6107a68251806106458982019067912d4bf8997aa636602083019252565b6107c48251806106458982019067adf3f4f48ab05c06602083019252565b6107e2825180610645898201906717108045a86b3ec0602083019252565b6108008251806106458982019067f69b893e368da277602083019252565b61081e8251806106458982019067b6f4769bf23f6e3f602083019252565b8560006108977f5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c9361088c7f3636363636363636363636363636363636363636363636363636363636363636610880885193828b8d8795189118898501610582565b038a81018352826100e9565b85519182809261020f565b039060025afa156108fb576000946108ea946108d46108e0938851908651978894821891188b850191606093918352602083015260408201520190565b039081018452836100e9565b519182809261020f565b039060025afa156108fb5760005190565b610576565b94969592909361092483518061072587820190678635a9a5cbdb7228602083019252565b6109428351806107258782019067d616a51c693a4ccb602083019252565b61096083518061072587820190672efb49be3ff27fd7602083019252565b855b8551871080610ab2575b156109fb576109f59061099f8551806109938982019067a852050fcd22df50602083019252565b03908c820181526100e9565b6109ee6109cf6109c96109c36109b58c8c6104e1565b516001600160f81b03191690565b60f81c90565b60ff1690565b6109e86109e36109de8c610508565b610524565b610567565b90610554565b17966104cd565b95610962565b909550959095610a1f8351806107258782019067ec18ab814308ff18602083019252565b610a3d8351806107258782019067f452d69844eab8b6602083019252565b83955b8551871080610aa9575b15610a9c57610a9690610a718551806109938982019067f939a96e61b6f912602083019252565b6109ee610a876109c96109c36109b58c8c6104e1565b6109e86109e36109de8c610516565b95610a40565b945092959096945061076a565b50838710610a4a565b5084871061096c565b604051906060820182811067ffffffffffffffff8211176100e457604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b90600282018092116104dc57565b90602082018092116104dc57565b90610b518261010b565b610b5e60405191826100e9565b8281528092610b6f601f199161010b565b0190602036910137565b604090815190602090610bad83610b9e8482019067d426ab56b3371780602083019252565b03601f199485820181526100e9565b610bd7845180610bcb8582019067b36affc8f79a7efc602083019252565b039085820181526100e9565b610bf5845180610bcb8582019067afa0f85217035062602083019252565b8051610c4d5750610c3a9083610c22610c459551806105fa8582019067bd8278af7fcaf1fc602083019252565b5191829182019067b66d3ab462cd6c74602083019252565b0391820181526100e9565b6104576101b2565b92610c6c815180610bcb8582019067757b1e01b34edce6602083019252565b610c8a815180610bcb85820190676e5bfedd81ab2dd9602083019252565b610ca8815180610bcb8582019067ba353dfb1234bd47602083019252565b610cb0610abb565b93610ccf8251806105fa8682019067f34f9abd73b0e4de602083019252565b610ced8251806105fa868201906772a162458529c395602083019252565b610d09610d04610cfd8351610b2b565b6003900490565b61053c565b94610d2883518061064587820190671a4082153974cdf4602083019252565b610d468351806106458782019067ff92b13f7d3b12c9602083019252565b610d57610d5287610b39565b610b47565b95610d7684518061068e88820190674c528dcd4c46ba6a602083019252565b8652818251830190858801925b828210610e385750505091600382610c3a9482610457989795510680600114610e2457600214610e12575b50510680600114610e0457600214610df7575b610ddf8151806105fa8582019067a4fdb237e534bdf0602083019252565b519182918201906798083b4ea1ac21a8602083019252565b8551600019018652610dc1565b508551600119018652610dc1565b603d60f81b6000199091015238610dae565b50613d3d60f01b6001199091015238610dae565b9091926004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c1688010151600286015316850101519082015301929190610d8356fea2646970667358221220888deb1044482c14c173dd3e19a9568edf1e0c411b737cfaaf33cea291ac316264736f6c63430008160033";

type JWTConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: JWTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class JWT__factory extends ContractFactory {
  constructor(...args: JWTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      JWT & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): JWT__factory {
    return super.connect(runner) as JWT__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): JWTInterface {
    return new Interface(_abi) as JWTInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): JWT {
    return new Contract(address, _abi, runner) as unknown as JWT;
  }
}
