/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestJWT,
  TestJWTInterface,
} from "../../../contracts/test/TestJWT";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "secret",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "payload",
        type: "string",
      },
    ],
    name: "testHS256",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761031f908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c63c486f2261461002a57600080fd5b346101e1576003199080823601126101e55767ffffffffffffffff926004358481116101e157366023820112156101e15761006f903690602481600401359101610265565b906024358581116101e157366023820112156101e15761011561009d83923690602481600401359101610265565b936101248651976100bf602099672a39a31e245260158b8201528a81526101f5565b6100d988516761f403bb9a2dc1ab8b8201528a81526101f5565b6100f38851673c58ce4e918e42ec8b8201528a81526101f5565b875163bc6e4c4560e01b815260048101899052968794859460448601906102c4565b918483030160248501526102c4565b038173__$8f9caa4a00391e7768e6a3285c20104711$__5af49485156101e9578195610165575b50505061016190519282849384528301906102c4565b0390f35b90919294503d8083853e6101798185610227565b83019284818503126101e55780519182116101e5570182601f820112156101e1578051916101a683610249565b936101b387519586610227565b8385528584840101116101de575082916101d5918580610161960191016102a1565b9290388061014b565b80fd5b5080fd5b8280fd5b508251903d90823e3d90fd5b6040810190811067ffffffffffffffff82111761021157604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761021157604052565b67ffffffffffffffff811161021157601f01601f191660200190565b92919261027182610249565b9161027f6040519384610227565b82948184528183011161029c578281602093846000960137010152565b600080fd5b60005b8381106102b45750506000910152565b81810151838201526020016102a4565b906020916102dd815180928185528580860191016102a1565b601f01601f191601019056fea2646970667358221220422c76b3af4edb2bf1fd3f193a8a83b66d2626262119dacfbd2a7977029ca2e464736f6c63430008160033";

type TestJWTConstructorParams =
  | [linkLibraryAddresses: TestJWTLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestJWTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class TestJWT__factory extends ContractFactory {
  constructor(...args: TestJWTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, TestJWT__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: TestJWTLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$8f9caa4a00391e7768e6a3285c20104711\\$__", "g"),
      linkLibraryAddresses["contracts/lib/JWT.sol:JWT"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestJWT & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestJWT__factory {
    return super.connect(runner) as TestJWT__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestJWTInterface {
    return new Interface(_abi) as TestJWTInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestJWT {
    return new Contract(address, _abi, runner) as unknown as TestJWT;
  }
}

export interface TestJWTLibraryAddresses {
  ["contracts/lib/JWT.sol:JWT"]: string;
}
