/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestAccount,
  TestAccountInterface,
} from "../../../contracts/test/TestAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "CloneCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "controller",
        type: "address",
      },
    ],
    name: "testClone",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803461007457601f61021a38819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600080546001600160a01b03191691909117905560405161018a90816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c63556d71231461002a57600080fd5b3461014c57602080600319360112610150576001600160a01b0391836004358481169081900361014c57606483838193888896541690631cc42c0760e31b845260048401528160248401528160448401525af19081156101415784916100b9575b507fbe2f3d28fdeb5839123d65fd47ec2f5915c715d2b527b9e229123706fdecfc859260405191168152a180f35b9050813d831161013a575b601f8101601f1916820167ffffffffffffffff811183821017610126578391839160405281010312610122575191808316830361012257917fbe2f3d28fdeb5839123d65fd47ec2f5915c715d2b527b9e229123706fdecfc8561008b565b8380fd5b634e487b7160e01b86526041600452602486fd5b503d6100c4565b6040513d86823e3d90fd5b5080fd5b8280fdfea26469706673582212201be5d765a1ddaab8b555460c08a7eed3dd71c441cb95db385b676c561774f8f764736f6c63430008160033";

type TestAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestAccount__factory extends ContractFactory {
  constructor(...args: TestAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _factory: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_factory, overrides || {});
  }
  override deploy(
    _factory: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_factory, overrides || {}) as Promise<
      TestAccount & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestAccount__factory {
    return super.connect(runner) as TestAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestAccountInterface {
    return new Interface(_abi) as TestAccountInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestAccount {
    return new Contract(address, _abi, runner) as unknown as TestAccount;
  }
}
