/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  TestOTPSHA256,
  TestOTPSHA256Interface,
} from "../../../../contracts/test/TestOTP.sol/TestOTPSHA256";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "HMAC",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "K",
        type: "bytes",
      },
      {
        internalType: "uint64",
        name: "C",
        type: "uint64",
      },
    ],
    name: "HOTP",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "uint32",
        name: "time_step",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "when",
        type: "uint32",
      },
    ],
    name: "TOTP",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610a54908161001c8239f35b600080fdfe6040608081526004908136101561001557600080fd5b600090813560e01c806343501d60146102185780636cd87a9c146101715763e5373c951461004257600080fd5b3461016d57606036600319011261016d57823567ffffffffffffffff8111610169576100719036908501610306565b60243563ffffffff9081811680910361016557604435828116809103610161578451956100af60209767a9ed433e4f6eb50f898201528881526102b2565b6100c9865167b2c39e4cb8f639c7898201528881526102b2565b6100e3865167a773732de65733a1898201528881526102b2565b6100fd8651679eccbddc83e12320898201528881526102b2565b61011786516743cb2b65a55cbf33898201528881526102b2565b610131865167bd083d18fa5d033a898201528881526102b2565b821561014e575061014794959650041690610362565b9051908152f35b634e487b7160e01b815260128852602490fd5b8580fd5b8480fd5b8280fd5b5080fd5b50823461016957816003193601126101695767ffffffffffffffff8135818111610165576101a29036908401610306565b936024359182116102155750610147916101be91369101610306565b8251936101dc6020956766c03d2433cb4c46878201528681526102b2565b6101f6845167c2810cd51ecacb23878201528681526102b2565b6102108451673234191b63cd4605878201528681526102b2565b610587565b80fd5b508234610169578160031936011261016957803567ffffffffffffffff918282116101655761024991369101610306565b92602435918216820361021557506101479082519361027960209567302c88dc9baf532b878201528681526102b2565b610293845167dafd2d0b256f9b68878201528681526102b2565b6102ad845167a66d2635ce14c220878201528681526102b2565b610362565b6040810190811067ffffffffffffffff8211176102ce57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176102ce57604052565b81601f8201121561035d5780359067ffffffffffffffff82116102ce576040519261033b601f8401601f1916602001856102e4565b8284526020838301011161035d57816000926020809301838601378301015290565b600080fd5b6103dd604092835192610386602094674b639804d68622b5868201528581526102b2565b6103a0855167211115f95d9ba712868201528581526102b2565b6103ba855167a28ccb5015de3eec868201528581526102b2565b845160c09290921b6001600160c01b0319168483015260088252610210826102b2565b6103f78351673984a0da80172bfd848201528381526102b2565b6104118351671ff1e5c69d052e25848201528381526102b2565b600f811661042f845167e52761ff6a69b9ae858201528481526102b2565b61044984516798d27e027fb86dbc858201528481526102b2565b828110156104ee5760ff926001820184811161050457841692818410156104ee576002830185811161050457851694828610156104ee57600384018181116105045716828110156104ee57818080926104d6637f000000968b6104c0620f42409d51671dc1ee6e02ef484f848201528381526102b2565b5190679d7fd7872a4783838183015281526102b2565b1a961a60081b941a60101b921a60181b161717170690565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60001981146105045760010190565b9081518110156104ee570160200190565b8181029291811591840414171561050457565b60ff8111610504576001901b90565b9081519160005b838110610574575050016000815290565b8060208092840101518185015201610563565b906040918251916105a96020936779b2e8329931e06e858201528481526102b2565b6105c3845167ffa003839f0e6ede858201528481526102b2565b6105dd845167227debfc90cb012b858201528481526102b2565b6000916105fa8551673a3e03d733a3ab0c868201528581526102b2565b6106148551679a4d55f122dd36ef868201528581526102b2565b8261062f86516766cecb0fa69f1540878201528681526102b2565b6106498651674ac1b8669918e664878201528681526102b2565b610663865167429a0f64f04d2cd4878201528681526102b2565b61067d865167e0e024ea74f985db878201528681526102b2565b85825111600014610884575060006106cf85926106aa885167bb986885e35d08d0868201528581526102b2565b6106c48851678d62e6164a8aa2d4868201528581526102b2565b87519182809261055c565b039060025afa1561087957600051915b6106f98551677b2015326845f019868201528581526102b2565b610713855167912d4bf8997aa636868201528581526102b2565b61072d855167adf3f4f48ab05c06868201528581526102b2565b61074785516717108045a86b3ec0868201528581526102b2565b610761855167f69b893e368da277868201528581526102b2565b61077b855167b6f4769bf23f6e3f868201528581526102b2565b836000610800836107f57f5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c966107e77f3636363636363636363636363636363636363636363636363636363636363636918c5194838c8795188a860152188d840152606083019061055c565b03601f1981018352826102e4565b88519182809261055c565b039060025afa1561086e576000519185519381188585015218848301526060820152606081526080810181811067ffffffffffffffff8211176102ce57808452600091607f1990610851838261055c565b03019060025afa15610864575060005190565b513d6000823e3d90fd5b84513d6000823e3d90fd5b83513d6000823e3d90fd5b9594916108a5839594929551678635a9a5cbdb7228868201528581526102b2565b6108bf835167d616a51c693a4ccb868201528581526102b2565b6108d98351672efb49be3ff27fd7868201528581526102b2565b865b8551881080610a15575b1561095557610904845167a852050fcd22df50878201528681526102b2565b61090e8887610529565b5160f81c90601f898103908111610504576001600160fd1b03811681036105045761094f926109426109489260031b61054d565b9061053a565b179761051a565b966108db565b9095919650610974835167ec18ab814308ff18868201528581526102b2565b61098e835167f452d69844eab8b6868201528581526102b2565b83965b8551881080610a0c575b156109fe576109ba845167f939a96e61b6f912878201528681526102b2565b6109c48887610529565b5160f81c90603f898103908111610504576001600160fd1b0381168103610504576109f8926109426109489260031b61054d565b96610991565b9196509293509390936106df565b5083881061099b565b508488106108e556fea26469706673582212209924baad1857b129df3cece443dceaae0163721a503723164d5363309b84bc2c64736f6c63430008160033";

type TestOTPSHA256ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestOTPSHA256ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestOTPSHA256__factory extends ContractFactory {
  constructor(...args: TestOTPSHA256ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestOTPSHA256 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestOTPSHA256__factory {
    return super.connect(runner) as TestOTPSHA256__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestOTPSHA256Interface {
    return new Interface(_abi) as TestOTPSHA256Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestOTPSHA256 {
    return new Contract(address, _abi, runner) as unknown as TestOTPSHA256;
  }
}
