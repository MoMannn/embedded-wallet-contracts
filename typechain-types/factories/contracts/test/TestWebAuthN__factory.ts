/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestWebAuthN,
  TestWebAuthNInterface,
} from "../../../contracts/test/TestWebAuthN";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "in_data",
        type: "bytes",
      },
    ],
    name: "testParseAuthData",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "rpIdHash",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "UP",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "UV",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "BE",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "BS",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "AT",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "ED",
                type: "bool",
              },
            ],
            internalType: "struct AuthenticatorDataFlags",
            name: "flags",
            type: "tuple",
          },
          {
            internalType: "uint32",
            name: "signCount",
            type: "uint32",
          },
          {
            components: [
              {
                internalType: "bytes16",
                name: "aaguid",
                type: "bytes16",
              },
              {
                internalType: "bytes",
                name: "credentialId",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "credentialPublicKey",
                type: "bytes",
              },
            ],
            internalType: "struct AttestedCredentialData",
            name: "attestedCredentialData",
            type: "tuple",
          },
        ],
        internalType: "struct AuthenticatorData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576107a4908161001c8239f35b600080fdfe6040608081526004908136101561001557600080fd5b600090813560e01c63831479481461002c57600080fd5b346105e957602092836003193601126105d25767ffffffffffffffff9281358481116105e957366023820112156105e957808301359485116105e95736602486830101116105e95761007c61065f565b50610097845167f72d2a650bac50458882015287815261062d565b6100b1845167a5cfab62f81b36648882015287815261062d565b6100cb845167ae6a2edbc8ca876b8882015287815261062d565b6100d361065f565b916100ee85516740aa4e2c1f2d16338982015288815261062d565b610108855167dc5c89c6a4ca48bf8982015288815261062d565b6101228551673721761300eda96a8982015288815261062d565b61013c85516707764d783a8279c08982015288815261062d565b602586106105825761015e8551675a7aab5307b1c3268982015288815261062d565b6101788551678407a3c4d55bd8a28982015288815261062d565b85871161058257602482013583526101a0855167a883a9e0734aa6648982015288815261062d565b6101ba8551676298f813e83fa43e8982015288815261062d565b858710156105d657604482013560f81c936101e5865167223004fd9d0f3b4c8a82015289815261062d565b8784019660018616151588515261020c8751676bf8e934b4d799638b8201528a815261062d565b81861615158989510152610230875167ba4ae9a494f0fa398b8201528a815261062d565b6008861615158789510152610255875167d4dec54f9e8e2cc68b8201528a815261062d565b6080606096601081161515888b51015261027f8951672cf80d146096ed0a8d8201528c815261062d565b8881161515828b5101526102a389516701e58392fe1769128d8201528c815261062d565b16151560a0895101526102c68751676265f8ab902d0b008b8201528a815261062d565b806025116105d25786850193604581013560e01c85526102f6885167c3675a7c9f3b65fd8c8201528b815261062d565b610310885167224e6aedc05b880c8c8201528b815261062d565b8851608001511561059c57610335885167b016945083d025328c8201528b815261062d565b61034f885167f7071b60c0e424ab8c8201528b815261062d565b610369885167116cff581af97e638c8201528b815261062d565b868601519261038889516777e8cd98769399cf8d8201528c815261062d565b82603511610585576001600160801b031960498301351684526103bb8951678b20fac8aeb227548d8201528c815261062d565b6103d58951676648825ddc66cce18d8201528c815261062d565b8260371161058557605982013560f01c906104018c6734056394b98b50678c51918201528d815261062d565b81603701908160371161058957508310610585579161045b91605b8a9461044a8e61042f3684868801610716565b818a01528751906760cb7f2f7cd0095a81830152815261062d565b369381900360361901920101610716565b910152610478855167f554aeb05788a6348982015288815261062d565b6104928551671c30b8da92bd715b8982015288815261062d565b6104ac855167848dba7e5e514c1d8982015288815261062d565b60a08651015161058257508260a09693859363ffffffff610568946104e461057e99516782e0c47e6f884cf58a82015289815261062d565b86519a8b9a898c5284518a8d01525180511515898d0152898101511515868d015288810151151560808d0152858101511515828d01526080810151151560c08d01520151151560e08b01525116610100890152015193610120808801526001600160801b0319855116610140880152840151906101608701526101a08601906105ed565b91015183820361013f19016101808501526105ed565b0390f35b80fd5b8480fd5b634e487b7160e01b875260119052602486fd5b505050508260a09693859363ffffffff610568946105cd61057e995167348c977e42f9e0418a82015289815261062d565b6104e4565b8280fd5b634e487b7160e01b815260328452602490fd5b5080fd5b919082519283825260005b848110610619575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016105f8565b6040810190811067ffffffffffffffff82111761064957604052565b634e487b7160e01b600052604160045260246000fd5b6040908151608081019067ffffffffffffffff918181108382111761064957845280936000808352815160c081018181108682111761070257835281815281602082015281838201528160608201528160808201528160a0820152602084015280828401528151936060850190858210908211176106ee57825283526060602084018190529083018190520152565b634e487b7160e01b82526041600452602482fd5b634e487b7160e01b83526041600452602483fd5b92919267ffffffffffffffff918281116106495760405192601f8201601f19908116603f011684019081118482101761064957604052829481845281830111610769578281602093846000960137010152565b600080fdfea2646970667358221220b880719c4c07381867bb01e621095981e1d3f33e9e2c95d89eb577da279a8d1a64736f6c63430008160033";

type TestWebAuthNConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestWebAuthNConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestWebAuthN__factory extends ContractFactory {
  constructor(...args: TestWebAuthNConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestWebAuthN & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestWebAuthN__factory {
    return super.connect(runner) as TestWebAuthN__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestWebAuthNInterface {
    return new Interface(_abi) as TestWebAuthNInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestWebAuthN {
    return new Contract(address, _abi, runner) as unknown as TestWebAuthN;
  }
}
