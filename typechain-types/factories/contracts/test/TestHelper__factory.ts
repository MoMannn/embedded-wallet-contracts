/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestHelper,
  TestHelperInterface,
} from "../../../contracts/test/TestHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "in_data",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "personalization",
        type: "bytes32",
      },
    ],
    name: "createChallengeBase64",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "authenticatorData",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "enum MakeJSON.ValueType",
            name: "t",
            type: "uint8",
          },
          {
            internalType: "string",
            name: "k",
            type: "string",
          },
          {
            internalType: "string",
            name: "v",
            type: "string",
          },
        ],
        internalType: "struct MakeJSON.KeyValue[]",
        name: "clientDataTokens",
        type: "tuple[]",
      },
    ],
    name: "createDigest",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type TestHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestHelper__factory extends ContractFactory {
  constructor(...args: TestHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestHelper & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestHelper__factory {
    return super.connect(runner) as TestHelper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestHelperInterface {
    return new Interface(_abi) as TestHelperInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestHelper {
    return new Contract(address, _abi, runner) as unknown as TestHelper;
  }
}
