/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestBase64,
  TestBase64Interface,
} from "../../../contracts/test/TestBase64";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "input",
        type: "string",
      },
    ],
    name: "testDecode",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "input",
        type: "bytes",
      },
    ],
    name: "testEncode",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610637908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c90816359bfa6611461003a575063decddb891461003557600080fd5b610194565b3461009e57602036600319011261009e576004359067ffffffffffffffff821161009e573660238301121561009e5761009a6100866100813660048601356024870161011e565b61036c565b604051918291602083526020830190610154565b0390f35b80fd5b634e487b7160e01b600052604160045260246000fd5b604051906020820182811067ffffffffffffffff8211176100d757604052565b6100a1565b6040519190601f01601f1916820167ffffffffffffffff8111838210176100d757604052565b67ffffffffffffffff81116100d757601f01601f191660200190565b92919261013261012d83610102565b6100dc565b938285528282011161014f57816000926020928387013784010152565b600080fd5b919082519283825260005b848110610180575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161015f565b3461014f57602036600319011261014f5760043567ffffffffffffffff811161014f573660238201121561014f576100866101dc61009a92369060248160040135910161011e565b6104ea565b6101e96100b7565b9060008252565b6101f86100b7565b60008152906000368137565b9061021161012d83610102565b8281528092610222601f1991610102565b0190602036910137565b1561023357565b60405162461bcd60e51b815260206004820152601c60248201527f696e76616c696420626173653634206465636f64657220696e707574000000006044820152606490fd5b6040519060a0820182811067ffffffffffffffff8211176100d757604052608082527e1a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233000000000060808360006020820152743e0000003f3435363738393a3b3c3d00000000000060408201527d0102030405060708090a0b0c0d0e0f10111213141516171819000000000060608201520152565b634e487b7160e01b600052601160045260246000fd5b9060038202918083046003149015171561033357565b610307565b600281901b91906001600160fe1b0381160361033357565b906020820180921161033357565b906002820180921161033357565b80511561046e57610387610381825160031690565b1561022c565b61038f610278565b906103a361039e825160021c90565b61031d565b9182906103b76103b285610350565b610204565b93835184015160ff93603d85831614610447575b50508452828051019260208501905b8481106103e957505050505090565b6004600391019182516001906303fc000087838184168901015116613fc0848a8560081c168a01015160061b16019288620ff00082828660101c168b010151600c1b169360181c168801015160121b16010160e81b815201906103da565b600019909201919061ffff16613d3d14610462575b806103cb565b6001190190503861045c565b506104776101f0565b90565b604051906060820182811067ffffffffffffffff8211176100d757604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b8051156105f8576104f961047a565b9061051661051161050a835161035e565b6003900490565b610338565b916105236103b284610350565b92835281825183019060208501925b8282106105a65750505090600391828251068060011461059257600214610580575b50510680600114610574576002146105695790565b805160001901815290565b50805160011901815290565b603d60f81b6000199091015238610554565b50613d3d60f01b6001199091015238610554565b9091926004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c1688010151600286015316850101519082015301929190610532565b506104776101e156fea2646970667358221220fb1b17a9aa647a42198d71ba93e0d73b079cab24af427508b5b368b4178cbf3364736f6c63430008160033";

type TestBase64ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestBase64ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestBase64__factory extends ContractFactory {
  constructor(...args: TestBase64ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestBase64 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestBase64__factory {
    return super.connect(runner) as TestBase64__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestBase64Interface {
    return new Interface(_abi) as TestBase64Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestBase64 {
    return new Contract(address, _abi, runner) as unknown as TestBase64;
  }
}
